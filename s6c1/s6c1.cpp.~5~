#include <iostream>
#include <fstream>
#include <cmath>
#include <cstdlib>

using namespace std;

template <typename T> class Complex{
  T Re;
  T Im;
  double norm;
public:
  explicit Complex(): Re(0), Im(0) {}
  explicit Complex(T x, T y) {
    Re = x;
    Im = y;
    norm = sqrt(x * x + y * y);
  }

  double getNorm();
  T printRe();
  T printIm();
  void print();

  Complex operator=(const Complex& z);
  /* Complex operator=(T k);
  Complex operator+(const Complex& z);
  Complex operator+(T k);*/
  
  friend ostream& operator<<(ostream& out, const Complex& z);
  
};

double Complex::getNorm()
{
  return norm;
}

T Complex::printRe()
{
  return Re;
}

T Complex::printIm()
{
  return Im;
}

Complex Complex::operator=(const Complex& z)
{
  Re = z.Re;
  Im = z.Im;

  return (*this);
}

Complex Complex::operator+(const Complex& z)
{
  Complex res();
  res.Re = Re + z.Re;
  res.Im = Im + z.Im;
}

ostream& operator<<(ostream& out, const Complex& z)
{
  out << "\n";
  out << z.Re << " + " << z.Im << "i" << endl;
  out << "\n";
}

int main()
{
  Complex<double> z(2, 3);
  Complex<double> b(1, 4);

  cout << "Complexo z: ";
  cout << z;
  cout << "Complexo b: ";
  cout << b;

  return 0;
}
